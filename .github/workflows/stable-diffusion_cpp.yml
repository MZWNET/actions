name: Build stable-diffusion.cpp

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  get_short_commit_hash:
    runs-on: ubuntu-latest
    outputs:
      hash: ${{ steps.short_commit_hash.outputs.short }}
    steps:
      - name: Prepare commit hash
        id: commit_hash
        run: |
          git clone https://github.com/leejet/stable-diffusion.cpp cache --depth 1
          cd cache
          echo "hash=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
          cd ..
          rm -rf cache
      - name: Get short commit hash
        id: short_commit_hash
        uses: prompt/actions-commit-hash@v3
        with:
          commit: ${{ steps.commit_hash.outputs.hash }}
  build_openblas_avx2_linux:
    needs: get_short_commit_hash
    runs-on: ubuntu-latest
    steps:
      - name: Install Deps
        run: |
          sudo apt-get update
          sudo apt-get install ccache ninja-build libopenblas-dev zip -y
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: leejet/stable-diffusion.cpp
          submodules: recursive
      - name: Build
        run: |
          mkdir build
          cd build
          cmake .. -G "Ninja" -DCMAKE_BUILD_TYPE=Release -DGGML_OPENBLAS=ON -DGGML_AVX2=ON -DSD_FLASH_ATTN=ON -DSD_BUILD_SHARED_LIBS=ON
          cmake --build . --config Release
      - name: Pack
        run: |
          mkdir -p build/dist
          cd build/bin/
          zip ../dist/sd-master-${{ needs.get_short_commit_hash.outputs.hash }}-bin-linux-avx2-openblas-x64.zip ./*
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: openblas-avx2-linux
          path: build/dist/sd-master-${{ needs.get_short_commit_hash.outputs.hash }}-bin-linux-avx2-openblas-x64.zip
  build_cu121_avx2_linux:
    needs: get_short_commit_hash
    runs-on: ubuntu-latest
    steps:
      - name: Install CUDA 12.1
        id: install-cuda
        uses: Jimver/cuda-toolkit@v0.2.13
        with:
          cuda: "12.1.1"
      - name: Install Deps
        run: sudo apt-get install ccache zip ninja-build -y
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: leejet/stable-diffusion.cpp
          submodules: recursive
      - name: Build
        run: |
          mkdir build
          cd build
          cmake .. -G "Ninja" -DCMAKE_BUILD_TYPE=Release -DSD_CUBLAS=ON -DSD_FAST_SOFTMAX=ON -DGGML_AVX2=ON -DSD_BUILD_SHARED_LIBS=ON
          cmake --build . --config Release
      - name: Pack
        run: |
          mkdir -p build/dist
          cd build/bin/
          zip ../dist/sd-master-${{ needs.get_short_commit_hash.outputs.hash }}-bin-linux-avx2-cublas-cu121-x64.zip ./*
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: cu121-avx2-linux
          path: build/dist/sd-master-${{ needs.get_short_commit_hash.outputs.hash }}-bin-linux-avx2-cublas-cu121-x64.zip
  build_cu121_avx512_win:
    needs: get_short_commit_hash
    runs-on: windows-latest
    steps:
      - name: Setup VS Dev Environment
        uses: seanmiddleditch/gha-setup-vsdevenv@v4
      - name: Install CUDA 12.1
        id: install-cuda
        uses: Jimver/cuda-toolkit@v0.2.13
        with:
          cuda: "12.1.1"
      - name: Setup ccache
        uses: Chocobo1/setup-ccache-action@v1
        with:
          windows_compile_environment: msvc
      - name: Install Ninja
        uses: urkle/action-get-ninja@v1
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: leejet/stable-diffusion.cpp
          submodules: recursive
      - name: Build
        run: |
          mkdir build
          cd build
          cmake .. -G "Ninja" -DCMAKE_BUILD_TYPE=Release -DSD_CUBLAS=ON -DSD_FAST_SOFTMAX=ON -DGGML_AVX512=ON -DSD_BUILD_SHARED_LIBS=ON
          cmake --build . --config Release
      - name: Pack
        run: |
          cd build\bin\
          7z a ..\dist\sd-master-${{ needs.get_short_commit_hash.outputs.hash }}-bin-win-avx512-cublas-cu121-x64.zip .
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: cu121-avx512-win
          path: build/dist/sd-master-${{ needs.get_short_commit_hash.outputs.hash }}-bin-win-avx512-cublas-cu121-x64.zip
  build_cublas_avx2_win:
    needs: get_short_commit_hash
    runs-on: windows-latest
    steps:
      - name: Setup VS Dev Environment
        uses: seanmiddleditch/gha-setup-vsdevenv@v4
      - name: Install CUDA 11.3
        id: install-cuda
        uses: Jimver/cuda-toolkit@v0.2.13
        with:
          cuda: "11.3.1"
      - name: Setup ccache
        uses: Chocobo1/setup-ccache-action@v1
        with:
          windows_compile_environment: msvc
      - name: Install Ninja
        uses: urkle/action-get-ninja@v1
      - name: Inject code to support CUDA 11.3 in VS2022
        run: |
          # Get visual studio install dir
          $vcdir = $(vswhere -latest -products * -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -property installationPath)
          $msvc = $(join-path $vcdir $('VC\Tools\MSVC\'+$(gc -raw $(join-path $vcdir 'VC\Auxiliary\Build\Microsoft.VCToolsVersion.default.txt')).Trim()))
          # Remove CUDA 11.3 compiler version check
          $content = Get-Content -Path "${{steps.install-cuda.outputs.CUDA_PATH}}\include\crt\host_config.h" -Raw
          $newContent = $content -replace '#if _MSC_VER < 1910 \|\| _MSC_VER >= 1930', ''
          $newContent = $newContent -replace "#error -- unsupported Microsoft Visual Studio version! Only the versions between 2017 and 2019 \(inclusive\) are supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.", ''
          $newContent = $newContent -replace '#elif _MSC_VER >= 1910 && _MSC_VER < 1910', '#if _MSC_VER >= 1910 && _MSC_VER < 1910'
          $newContent | Set-Content -Path "${{steps.install-cuda.outputs.CUDA_PATH}}\include\crt\host_config.h"
          # Remove VS2022 CUDA version check
          $content = Get-Content -Path ($msvc + "\include\yvals_core.h") -Raw
          $newContent = $content -replace '#if __CUDACC_VER_MAJOR__ < 11 \|\| \(__CUDACC_VER_MAJOR__ == 11 \&\& __CUDACC_VER_MINOR__ < 6\)', '#if __CUDACC_VER_MAJOR__ < 11'
          $newContent | Set-Content -Path ($msvc + "\include\yvals_core.h")
          # Debug
          mv ($msvc + "\include\yvals_core.h") .\
          # Add CUDA 11.3 Visual Studio Integration to VS2022
          cp "${{steps.install-cuda.outputs.CUDA_PATH}}\extras\visual_studio_integration\MSBuildExtensions\*" ($vcdir + "\MSBuild\Microsoft\VC\v170\BuildCustomizations\")
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: leejet/stable-diffusion.cpp
          submodules: recursive
      - name: Build
        run: |
          mkdir build
          cd build
          cmake .. -G "Ninja" -DCMAKE_BUILD_TYPE=Release -DSD_CUBLAS=ON -DSD_FAST_SOFTMAX=ON -DGGML_AVX2=ON -DGGML_CUDA_ARCHITECTURES=35 -DSD_BUILD_SHARED_LIBS=ON
          cmake --build . --config Release
      - name: Pack
        run: |
          cd build\bin\
          7z a ..\dist\sd-master-${{ needs.get_short_commit_hash.outputs.hash }}-bin-win-avx2-cublas-cu113-x64.zip .
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: cu113-avx2-win
          path: build/dist/sd-master-${{ needs.get_short_commit_hash.outputs.hash }}-bin-win-avx2-cublas-cu113-x64.zip
  build_openblas_avx2_win:
    needs: get_short_commit_hash
    runs-on: windows-latest
    steps:
      - name: Setup ccache
        uses: Chocobo1/setup-ccache-action@v1
        with:
          windows_compile_environment: msvc
      - name: Install Ninja
        uses: urkle/action-get-ninja@v1
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: leejet/stable-diffusion.cpp
          submodules: recursive
      - name: Install OpenBLAS
        run: |
          curl -L -o OpenBLAS-0.3.26-x64.zip https://github.com/OpenMathLib/OpenBLAS/releases/download/v0.3.26/OpenBLAS-0.3.26-x64.zip
          curl -L -o w64devkit-fortran-1.21.0.zip https://github.com/skeeto/w64devkit/releases/download/v1.21.0/w64devkit-fortran-1.21.0.zip
          7z x OpenBLAS-0.3.26-x64.zip -oOpenBLAS
          7z x w64devkit-fortran-1.21.0.zip
          mv OpenBLAS\lib\libopenblas.a w64devkit\x86_64-w64-mingw32\lib\
          rm -Recurse -Force OpenBLAS
          rm -Force w64devkit-fortran-1.21.0.zip
          rm -Force OpenBLAS-0.3.26-x64.zip
      - name: Build
        run: |
          mkdir build
          echo 'cd $GITHUB_WORKSPACE && cd build && cmake .. -G "Ninja" -DCMAKE_BUILD_TYPE=Release -DGGML_OPENBLAS=ON -DGGML_AVX2=ON -DSD_FLASH_ATTN=ON -DSD_BUILD_SHARED_LIBS=ON && cmake --build . --config Release' | .\w64devkit\w64devkit.exe
      - name: Clean
        run: |
          rm -Recurse -Force w64devkit
      - name: Pack
        run: |
          cd build\bin\
          7z a ..\dist\sd-master-${{ needs.get_short_commit_hash.outputs.hash }}-bin-win-avx2-openblas-x64.zip .
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: openblas-avx2-win
          path: build/dist/sd-master-${{ needs.get_short_commit_hash.outputs.hash }}-bin-win-avx2-openblas-x64.zip
  release:
    runs-on: ubuntu-latest
    needs: [get_short_commit_hash, build_openblas_avx2_linux, build_cu121_avx2_linux, build_cu121_avx512_win, build_openblas_avx2_win]
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: |
            dist/
      - name: Prepare Release
        run: |
          cd dist
          mv -f openblas-avx2-linux/* .
          mv -f cu121-avx2-linux/* .
          mv -f cu121-avx512-win/* .
          mv -f openblas-avx2-win/* .
          rm -rf openblas-avx2-linux cu121-avx2-linux cu121-avx512-win openblas-avx2-win
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: sd-master-${{ needs.get_short_commit_hash.outputs.hash }}
          name: Binary build for stable-diffusion.cpp (${{ needs.get_short_commit_hash.outputs.hash }})
          body: |
            This release contains the x86_64 binary of [stable-diffusion.cpp](https://github.com/leejet/stable-diffusion.cpp).
          files: dist/*
          fail_on_unmatched_files: true
